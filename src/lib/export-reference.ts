// src/lib/export-reference.ts
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { Wrapper, WrapperCalculation, SAP_ACTIVATE_PHASES } from '@/types/wrappers';
import { formatCurrency } from '@/lib/utils';

interface ExportData {
  wrappers: Wrapper[];
  calculations: WrapperCalculation[];
  coreEffort: number;
  coreEffortCost: number;
  projectName?: string;
}

export function exportReferenceToPDF(data: ExportData) {
  const doc = new jsPDF();
  const { wrappers, calculations, coreEffort, coreEffortCost, projectName } = data;

  // Calculate totals
  const totalWrapperEffort = calculations.reduce((sum, c) => sum + c.wrapperEffort, 0);
  const totalWrapperCost = calculations.reduce((sum, c) => sum + c.wrapperCost, 0);
  const grandTotalEffort = coreEffort + totalWrapperEffort;
  const grandTotalCost = coreEffortCost + totalWrapperCost;

  // Title
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('SAP Activate Reference Architecture', 14, 20);

  // Project name
  if (projectName) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(projectName, 14, 28);
  }

  // Date
  doc.setFontSize(10);
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, 14, 36);

  // SAP Activate Phases Overview
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('SAP Activate Methodology', 14, 50);

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  let yPos = 58;

  SAP_ACTIVATE_PHASES.forEach((phase) => {
    doc.text(`${phase.name}: ${phase.description}`, 14, yPos);
    yPos += 6;
  });

  // Wrapper Configuration Table
  yPos += 10;
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Wrapper Configuration', 14, yPos);

  yPos += 8;

  const tableData = wrappers.map((wrapper) => {
    const calc = calculations.find((c) => c.wrapperId === wrapper.id);
    return [
      wrapper.name,
      `${wrapper.currentPercentage.toFixed(0)}%`,
      `${calc?.wrapperEffort.toFixed(1) || '0.0'} PD`,
      formatCurrency(calc?.wrapperCost || 0, 'MYR'),
      wrapper.sapActivatePhase,
    ];
  });

  autoTable(doc, {
    startY: yPos,
    head: [['Wrapper', '% of Core', 'Effort', 'Cost', 'Phase']],
    body: tableData,
    theme: 'grid',
    headStyles: {
      fillColor: [59, 130, 246], // blue-500
      textColor: 255,
      fontStyle: 'bold',
    },
    styles: {
      fontSize: 9,
      cellPadding: 3,
    },
    columnStyles: {
      0: { cellWidth: 50 },
      1: { cellWidth: 25, halign: 'center' },
      2: { cellWidth: 30, halign: 'right' },
      3: { cellWidth: 40, halign: 'right' },
      4: { cellWidth: 30, halign: 'center' },
    },
  });

  // Summary Table
  const finalY = (doc as any).lastAutoTable.finalY || yPos + 50;
  yPos = finalY + 15;

  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Project Summary', 14, yPos);

  yPos += 8;

  const summaryData = [
    ['Core Effort', `${coreEffort.toFixed(0)} PD`, formatCurrency(coreEffortCost, 'MYR')],
    ['Total Wrapper Effort', `${totalWrapperEffort.toFixed(0)} PD`, formatCurrency(totalWrapperCost, 'MYR')],
    ['Grand Total', `${grandTotalEffort.toFixed(0)} PD`, formatCurrency(grandTotalCost, 'MYR')],
  ];

  autoTable(doc, {
    startY: yPos,
    head: [['Category', 'Effort', 'Cost']],
    body: summaryData,
    theme: 'plain',
    headStyles: {
      fillColor: [229, 231, 235], // gray-200
      textColor: 0,
      fontStyle: 'bold',
    },
    bodyStyles: {
      fontSize: 10,
    },
    columnStyles: {
      0: { cellWidth: 70, fontStyle: 'bold' },
      1: { cellWidth: 40, halign: 'right' },
      2: { cellWidth: 60, halign: 'right' },
    },
    didParseCell: (data) => {
      // Highlight grand total row
      if (data.row.index === 2 && data.section === 'body') {
        data.cell.styles.fillColor = [220, 252, 231]; // green-100
        data.cell.styles.textColor = [22, 163, 74]; // green-600
        data.cell.styles.fontStyle = 'bold';
      }
    },
  });

  // Footer
  const pageCount = doc.getNumberOfPages();
  doc.setFontSize(8);
  doc.setFont('helvetica', 'normal');
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.text(
      `Page ${i} of ${pageCount} | Generated by SAP Implementation Cockpit`,
      14,
      doc.internal.pageSize.height - 10
    );
  }

  // Save
  const filename = projectName
    ? `${projectName.replace(/\s+/g, '_')}_SAP_Activate_Reference.pdf`
    : `SAP_Activate_Reference_${new Date().getTime()}.pdf`;

  doc.save(filename);
}
