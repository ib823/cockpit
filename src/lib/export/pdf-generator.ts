// src/lib/export/pdf-generator.ts
// PDF generation for timeline export

import type { Phase } from "@/lib/timeline/phase-generation";
import { PDFDocument, rgb, StandardFonts } from "pdf-lib";

export interface PDFExportData {
  projectName: string;
  startDate: string;
  endDate: string;
  totalCost: number;
  currency: string;
  phases: Phase[];
  teamMembers: Array<{
    name: string;
    role: string;
    allocation: number;
  }>;
}

/**
 * Generate PDF proposal from timeline data
 */
export async function generateTimelinePDF(data: PDFExportData): Promise<Uint8Array> {
  // Create new PDF
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([612, 792]); // US Letter size

  // Load fonts
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

  const { width, height } = page.getSize();
  let yPosition = height - 50;

  // Title
  page.drawText("SAP Implementation Timeline", {
    x: 50,
    y: yPosition,
    size: 24,
    font: fontBold,
    color: rgb(0, 0, 0),
  });

  yPosition -= 40;

  // Project Info
  const projectInfo = [
    `Project: ${data.projectName}`,
    `Duration: ${data.startDate} - ${data.endDate}`,
    `Total Cost: ${data.currency} ${formatNumber(data.totalCost)}`,
    `Team Size: ${data.teamMembers.length} members`,
  ];

  projectInfo.forEach((line) => {
    page.drawText(line, {
      x: 50,
      y: yPosition,
      size: 12,
      font: font,
      color: rgb(0, 0, 0),
    });
    yPosition -= 20;
  });

  yPosition -= 20;

  // Section: Phases
  page.drawText("Implementation Phases", {
    x: 50,
    y: yPosition,
    size: 16,
    font: fontBold,
    color: rgb(0, 0, 0),
  });

  yPosition -= 25;

  // Phase table header
  const tableX = 50;
  const colWidths = [150, 100, 80, 100];

  const headers = ["Phase", "Duration", "Effort (PD)", "Team Size"];
  headers.forEach((header, i) => {
    const x = tableX + colWidths.slice(0, i).reduce((a, b) => a + b, 0);
    page.drawText(header, {
      x,
      y: yPosition,
      size: 10,
      font: fontBold,
      color: rgb(0, 0, 0),
    });
  });

  yPosition -= 20;

  // Phase rows
  data.phases.forEach((phase) => {
    if (yPosition < 50) {
      // Add new page if needed
      const newPage = pdfDoc.addPage([612, 792]);
      yPosition = height - 50;
    }

    const rowData = [
      phase.name,
      `${phase.workingDays} days`,
      phase.effort?.toString() || "0",
      (phase.resources?.length || 0).toString(),
    ];

    rowData.forEach((data, i) => {
      const x = tableX + colWidths.slice(0, i).reduce((a, b) => a + b, 0);
      page.drawText(data, {
        x,
        y: yPosition,
        size: 9,
        font: font,
        color: rgb(0, 0, 0),
      });
    });

    yPosition -= 18;
  });

  yPosition -= 30;

  // Section: Team
  if (yPosition < 100) {
    const newPage = pdfDoc.addPage([612, 792]);
    yPosition = height - 50;
  }

  page.drawText("Project Team", {
    x: 50,
    y: yPosition,
    size: 16,
    font: fontBold,
    color: rgb(0, 0, 0),
  });

  yPosition -= 25;

  // Team table
  const teamHeaders = ["Name", "Role", "Allocation"];
  teamHeaders.forEach((header, i) => {
    const x = tableX + i * 150;
    page.drawText(header, {
      x,
      y: yPosition,
      size: 10,
      font: fontBold,
      color: rgb(0, 0, 0),
    });
  });

  yPosition -= 20;

  data.teamMembers.forEach((member) => {
    if (yPosition < 50) {
      const newPage = pdfDoc.addPage([612, 792]);
      yPosition = height - 50;
    }

    const teamData = [member.name, member.role, `${member.allocation}%`];

    teamData.forEach((data, i) => {
      const x = tableX + i * 150;
      page.drawText(data, {
        x,
        y: yPosition,
        size: 9,
        font: font,
        color: rgb(0, 0, 0),
      });
    });

    yPosition -= 18;
  });

  // Footer
  const pageCount = pdfDoc.getPageCount();
  for (let i = 0; i < pageCount; i++) {
    const currentPage = pdfDoc.getPage(i);
    currentPage.drawText(`Page ${i + 1} of ${pageCount}`, {
      x: width - 100,
      y: 30,
      size: 8,
      font: font,
      color: rgb(0.5, 0.5, 0.5),
    });

    currentPage.drawText("Generated by SAP Implementation Cockpit", {
      x: 50,
      y: 30,
      size: 8,
      font: font,
      color: rgb(0.5, 0.5, 0.5),
    });
  }

  // Serialize PDF
  const pdfBytes = await pdfDoc.save();
  return pdfBytes;
}

/**
 * Download PDF to user's computer
 */
export function downloadPDF(pdfBytes: Uint8Array, filename: string) {
  // Convert to standard Uint8Array to satisfy TypeScript's BlobPart type
  const standardArray = new Uint8Array(pdfBytes);
  const blob = new Blob([standardArray], { type: "application/pdf" });
  const url = URL.createObjectURL(blob);

  const link = document.createElement("a");
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);

  // Cleanup
  URL.revokeObjectURL(url);
}

/**
 * Format number with thousands separator
 */
function formatNumber(num: number): string {
  return new Intl.NumberFormat("en-US", {
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(num);
}
