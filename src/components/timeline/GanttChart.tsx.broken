"use client";
import React, { useMemo, useState, useRef } from 'react';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { Phase } from '@/lib/timeline/phase-generation';
import { useTimelineStore } from '@/stores/timeline-store';

interface DraggablePhaseRowProps {
  phase: Phase;
  index: number;
  isSelected: boolean;
  isHovered: boolean;
  onPhaseClick: (phaseId: string) => void;
  onHover: (phaseId: string | null) => void;
  onMove: (fromIndex: number, toIndex: number) => void;
  chartWidth: number;
  startDate: Date;
  endDate: Date;
}

const DraggablePhaseRow: React.FC<DraggablePhaseRowProps> = ({
  phase,
  index,
  isSelected,
  isHovered,
  onPhaseClick,
  onHover,
  onMove,
  chartWidth,
  startDate,
  endDate
}) => {
  const ref = useRef<HTMLGElement>(null);

  const [{ isDragging }, drag] = useDrag({
    type: 'phase-row',
    item: { index },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  const [, drop] = useDrop({
    accept: 'phase-row',
    hover: (item: { index: number }, monitor) => {
      if (!ref.current) return;
      
      const dragIndex = item.index;
      const hoverIndex = index;

      if (dragIndex === hoverIndex) return;

      const hoverBoundingRect = ref.current.getBoundingClientRect();
      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;
      const clientOffset = monitor.getClientOffset();
      
      if (!clientOffset) return;
      
      const hoverClientY = clientOffset.y - hoverBoundingRect.top;

      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) return;
      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) return;

      onMove(dragIndex, hoverIndex);
      item.index = hoverIndex;
    },
  });

  // Calculate phase bar dimensions
  const totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
  const phaseStartDays = Math.ceil((new Date(phase.startDate).getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
  const phaseDuration = Math.ceil((new Date(phase.endDate).getTime() - new Date(phase.startDate).getTime()) / (1000 * 60 * 60 * 24));
  
  const x = Math.max(0, (phaseStartDays / totalDays) * chartWidth);
  const width = Math.max(30, (phaseDuration / totalDays) * chartWidth);
  const y = index * 45 + 30; // Offset for header

  drag(drop(ref));

  const phaseColor = isSelected ? '#2563eb' : '#3b82f6'; // Blue variants
  const phaseOpacity = isDragging ? 0.5 : 1;

  return (
    <g
      ref={ref}
      style={{ 
        opacity: phaseOpacity,
        cursor: isDragging ? 'grabbing' : 'grab'
      }}
      className="phase-row-group"
    >
      {/* Phase background (full width) */}
      <rect
        x={0}
        y={y - 5}
        width={chartWidth}
        height={40}
        fill={isDragging ? '#f3f4f6' : 'transparent'}
        stroke={isDragging ? '#d1d5db' : 'none'}
        strokeWidth={1}
        className="transition-all"
      />
      
      {/* Phase bar */}
      <rect
        x={x}
        y={y + 2}
        width={width}
        height={28}
        rx={4}
        fill={phaseColor}
        stroke={isHovered ? '#1d4ed8' : phaseColor}
        strokeWidth={isHovered ? 2 : 1}
        className="transition-all cursor-pointer"
        onClick={() => onPhaseClick(phase.id)}
        onMouseEnter={() => onHover(phase.id)}
        onMouseLeave={() => onHover(null)}
      />
      
      {/* Phase label */}
      <text
        x={x + 8}
        y={y + 20}
        fill="white"
        fontSize="12"
        fontWeight="500"
        className="pointer-events-none select-none"
        textAnchor="start"
      >
        {phase.name}
      </text>
      
      {/* Duration label */}
      <text
        x={x + width - 8}
        y={y + 20}
        fill="white"
        fontSize="10"
        className="pointer-events-none select-none"
        textAnchor="end"
      >
        {Math.ceil(phaseDuration)}d
      </text>
      
      {/* Drag handle */}
      <g className="drag-handle">
        <rect
          x={x + width - 20}
          y={y + 8}
          width={12}
          height={12}
          fill="rgba(255,255,255,0.8)"
          rx={2}
          className="cursor-grab hover:fill-white transition-all"
        />
        <path
          d={`M${x + width - 17},${y + 11} L${x + width - 11},${y + 11} M${x + width - 17},${y + 14} L${x + width - 11},${y + 14} M${x + width - 17},${y + 17} L${x + width - 11},${y + 17}`}
          stroke="#6b7280"
          strokeWidth={1}
          className="pointer-events-none"
        />
      </g>
    </g>
  );
};

interface GanttChartProps {
  phases: Phase[];
  zoomLevel: 'daily' | 'weekly' | 'biweekly' | 'monthly';
  onPhaseClick?: (phaseId: string) => void;
  selectedPhaseId?: string | null;
}

const GanttChart: React.FC<GanttChartProps> = ({
  phases,
  zoomLevel,
  onPhaseClick,
  selectedPhaseId
}) => {
  const [hoveredPhase, setHoveredPhase] = useState<string | null>(null);
  const { movePhaseOrder } = useTimelineStore();

  // Calculate date range
  const { startDate, endDate } = useMemo(() => {
    if (!phases.length) return { startDate: new Date(), endDate: new Date() };
    
    const start = new Date(Math.min(...phases.map(p => new Date(p.startDate).getTime())));
    const end = new Date(Math.max(...phases.map(p => new Date(p.endDate).getTime())));
    
    return { startDate: start, endDate: end };
  }, [phases]);

  if (!phases.length) {
    return (
      <div className="flex items-center justify-center h-64 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
        <div className="text-center">
          <div className="text-gray-400 mb-2 text-2xl">ðŸ“Š</div>
          <p className="text-gray-500">Generate a timeline to see the Gantt chart</p>
          <p className="text-sm text-gray-400 mt-1">Select packages and click Generate Timeline</p>
        </div>
      </div>
    );
  }

  const chartWidth = 800;
  const chartHeight = phases.length * 45 + 80; // Space for header and phases

  const handlePhaseMove = (fromIndex: number, toIndex: number) => {
    movePhaseOrder(fromIndex, toIndex);
  };

  const handlePhaseClick = (phaseId: string) => {
    onPhaseClick?.(phaseId);
  };

  const formatDateRange = (start: Date, end: Date) => {
    return `${start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${end.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="bg-white rounded-lg border shadow-sm overflow-hidden">
        {/* Header */}
        <div className="p-4 border-b bg-gray-50">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="font-semibold text-gray-900">Project Timeline</h3>
              <p className="text-sm text-gray-600">
                {formatDateRange(startDate, endDate)} â€¢ {phases.length} phases
              </p>
            </div>
            <div className="text-xs text-gray-500 flex items-center gap-2">
              <span className="flex items-center gap-1">
                <div className="w-3 h-3 bg-blue-500 rounded"></div>
                Phase
              </span>
              <span>Drag rows to reorder</span>
            </div>
          </div>
        </div>
        
        {/* Chart */}
        <div className="p-4 overflow-x-auto">
          <svg
            width={chartWidth}
            height={chartHeight}
            viewBox={`0 0 ${chartWidth} ${chartHeight}`}
            className="border rounded bg-white"
          >
            {/* Grid background */}
            <defs>
              <pattern id="grid" width="50" height="45" patternUnits="userSpaceOnUse">
                <path d="M 50 0 L 0 0 0 45" fill="none" stroke="#f3f4f6" strokeWidth="1"/>
              </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#grid)" />
            
            {/* Timeline header */}
            <rect x={0} y={0} width={chartWidth} height={30} fill="#f9fafb" />
            <text x={10} y={20} className="fill-gray-700 text-sm font-medium">
              Timeline: {formatDateRange(startDate, endDate)}
            </text>
            
            {/* Phase rows */}
            {phases.map((phase, index) => (
              <DraggablePhaseRow
                key={phase.id}
                phase={phase}
                index={index}
                isSelected={selectedPhaseId === phase.id}
                isHovered={hoveredPhase === phase.id}
                onPhaseClick={handlePhaseClick}
                onHover={setHoveredPhase}
                onMove={handlePhaseMove}
                chartWidth={chartWidth}
                startDate={startDate}
                endDate={endDate}
              />
            ))}
          </svg>
        </div>
        
        {/* Footer */}
        <div className="px-4 py-3 bg-gray-50 border-t">
          <div className="flex items-center justify-between text-xs text-gray-600">
            <span>ðŸ’¡ Drag the handle (â‹®â‹®â‹®) on any phase to reorder</span>
            <span>Click phases to select â€¢ Dependencies auto-resolve</span>
          </div>
        </div>
      </div>
    </DndProvider>
  );
};

export default GanttChart;
