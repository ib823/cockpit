'use client';

import React, { useState, useCallback } from 'react';
import { useTimelineStore } from '@/stores/timeline-store';
import { SAP_PACKAGES } from '@/data/sap-catalog';
import { formatCurrency, RESOURCE_CATALOG } from '@/data/resource-catalog';
import { businessDayToDate, formatDateElegant } from '@/lib/timeline/date-calculations';
import GanttChart from '@/components/timeline/GanttChart';
import TimelineControls from '@/components/timeline/TimelineControls';

export default function TimelinePage() {
  const {
    profile,
    setProfile,
    selectedPackages,
    addPackage,
    removePackage,
    phases,
    generateTimeline,
    holidays,
    addHoliday,
    removeHoliday,
    selectPhase,
    selectedPhaseId,
    updatePhaseResources,
  } = useTimelineStore();

  const [showHolidayPanel, setShowHolidayPanel] = useState(false);
  const [showResourcePanel, setShowResourcePanel] = useState(false);
  const [selectedPhase, setSelectedPhase] = useState<any>(null);

  // Handle phase click to show resource panel
  const handlePhaseClick = useCallback((phaseId: string) => {
    selectPhase(phaseId);
    const phase = phases.find(p => p.id === phaseId);
    if (phase) {
      setSelectedPhase(phase);
      setShowResourcePanel(true);
    }
  }, [phases, selectPhase]);

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-full mx-auto p-6">
        {/* Header with Quick Actions */}
        <div className="mb-6 flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">SAP Implementation Timeline</h1>
            <p className="text-gray-600 mt-2">Plan your implementation with intelligent scheduling</p>
          </div>
          
          {/* Quick Action Buttons - ALWAYS VISIBLE */}
          <div className="flex gap-2">
            <button
              onClick={() => setShowHolidayPanel(true)}
              className="px-4 py-2 bg-orange-500 text-white rounded-md hover:bg-orange-600 transition-colors flex items-center gap-2"
            >
              ðŸ“… Manage Holidays ({holidays.length})
            </button>
            
            {phases.length > 0 && (
              <button
                onClick={() => {
                  if (phases.length > 0) {
                    setSelectedPhase(phases[0]);
                    setShowResourcePanel(true);
                  }
                }}
                className="px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors flex items-center gap-2"
              >
                ðŸ‘¥ Manage Resources
              </button>
            )}
          </div>
        </div>

        {/* Configuration Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          {/* Client Profile */}
          <div className="bg-white rounded-lg border shadow-sm p-6">
            <h2 className="text-xl font-semibold mb-4 text-gray-800">Client Profile</h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Company Name
                </label>
                <input
                  type="text"
                  value={profile.company}
                  onChange={(e) => setProfile({ company: e.target.value })}
                  className="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter company name"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Complexity
                  </label>
                  <select
                    value={profile.complexity}
                    onChange={(e) => setProfile({ complexity: e.target.value as any })}
                    className="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="simple">Simple</option>
                    <option value="standard">Standard</option>
                    <option value="complex">Complex</option>
                    <option value="very_complex">Very Complex</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Region
                  </label>
                  <select
                    value={profile.region}
                    onChange={(e) => setProfile({ region: e.target.value as any })}
                    className="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="MY">Malaysia</option>
                    <option value="SG">Singapore</option>
                    <option value="VN">Vietnam</option>
                  </select>
                </div>
              </div>
            </div>
          </div>

          {/* SAP Package Selection */}
          <div className="bg-white rounded-lg border shadow-sm p-6">
            <h2 className="text-xl font-semibold mb-4 text-gray-800">SAP Packages</h2>
            
            <div className="space-y-2 max-h-64 overflow-y-auto">
              {Object.entries(SAP_PACKAGES).map(([key, pkg]) => (
                <label
                  key={key}
                  className="flex items-start space-x-3 p-3 rounded hover:bg-gray-50 cursor-pointer"
                >
                  <input
                    type="checkbox"
                    checked={selectedPackages.includes(key)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        addPackage(key);
                      } else {
                        removePackage(key);
                      }
                    }}
                    className="mt-1 w-4 h-4 text-blue-600 rounded focus:ring-blue-500"
                  />
                  <div className="flex-1">
                    <div className="font-medium text-gray-900">{pkg.name}</div>
                    <div className="text-sm text-gray-500">{pkg.description}</div>
                    <div className="text-xs text-gray-400 mt-1">
                      Effort: {pkg.baseEffort} days â€¢ {pkg.modules.length} modules
                    </div>
                  </div>
                </label>
              ))}
            </div>
            
            {selectedPackages.length > 0 && (
              <button
                onClick={generateTimeline}
                className="w-full mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors font-medium"
              >
                Generate Timeline ({selectedPackages.length} packages)
              </button>
            )}
          </div>
        </div>

        {/* Instructions for accessing panels */}
        {phases.length > 0 && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
            <p className="text-sm text-blue-800">
              ðŸ’¡ <strong>Tips:</strong> Click any phase bar to manage its resources | Use buttons above to manage holidays and resources
            </p>
          </div>
        )}

        {/* Timeline Controls & Gantt Chart */}
        {phases.length > 0 && <TimelineControls />}
        
        <GanttChart
          phases={phases}
          zoomLevel="weekly"
          onPhaseClick={handlePhaseClick}
          selectedPhaseId={selectedPhaseId}
          holidays={holidays}
          showCalendarAxis={true}
        />

        {/* Holiday Management Panel */}
        {showHolidayPanel && (
          <div className="fixed inset-0 z-50 overflow-hidden">
            <div className="absolute inset-0 bg-black bg-opacity-50" onClick={() => setShowHolidayPanel(false)} />
            <div className="absolute right-0 top-0 h-full w-96 bg-white shadow-2xl overflow-y-auto">
              <div className="sticky top-0 bg-white border-b p-6">
                <div className="flex items-center justify-between">
                  <h2 className="text-xl font-semibold">Holiday Management</h2>
                  <button
                    onClick={() => setShowHolidayPanel(false)}
                    className="p-2 hover:bg-gray-200 rounded-lg"
                  >
                    âœ•
                  </button>
                </div>
              </div>

              <div className="p-6">
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.currentTarget);
                  const date = formData.get('date') as string;
                  const name = formData.get('name') as string;
                  if (date && name) {
                    addHoliday({ date, name, country: profile.region || 'MY' });
                    e.currentTarget.reset();
                  }
                }} className="space-y-4 mb-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Holiday Date
                    </label>
                    <input
                      type="date"
                      name="date"
                      required
                      className="w-full px-3 py-2 border rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Holiday Name
                    </label>
                    <input
                      type="text"
                      name="name"
                      placeholder="e.g., Chinese New Year"
                      required
                      className="w-full px-3 py-2 border rounded-md"
                    />
                  </div>
                  <button
                    type="submit"
                    className="w-full px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600"
                  >
                    Add Holiday
                  </button>
                </form>

                <h3 className="font-medium mb-3">Current Holidays ({holidays.length})</h3>
                {holidays.length === 0 ? (
                  <p className="text-gray-500">No holidays configured</p>
                ) : (
                  <div className="space-y-2">
                    {holidays.map((holiday, idx) => (
                      <div key={idx} className="flex items-center justify-between p-3 bg-gray-50 rounded">
                        <div>
                          <div className="font-medium">{holiday.name}</div>
                          <div className="text-sm text-gray-500">
                            {formatDateElegant(new Date(holiday.date))}
                          </div>
                        </div>
                        <button
                          onClick={() => removeHoliday(holiday.date)}
                          className="text-red-500 hover:text-red-700"
                        >
                          Delete
                        </button>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Resource Management Panel */}
        {showResourcePanel && selectedPhase && (
          <div className="fixed inset-0 z-50 overflow-hidden">
            <div className="absolute inset-0 bg-black bg-opacity-50" onClick={() => setShowResourcePanel(false)} />
            <div className="absolute right-0 top-0 h-full w-96 bg-white shadow-2xl overflow-y-auto">
              <div className="sticky top-0 bg-white border-b p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <h2 className="text-xl font-semibold">{selectedPhase.name}</h2>
                    <p className="text-sm text-gray-500">Resource Assignment</p>
                  </div>
                  <button
                    onClick={() => setShowResourcePanel(false)}
                    className="p-2 hover:bg-gray-200 rounded-lg"
                  >
                    âœ•
                  </button>
                </div>
              </div>

              <div className="p-6">
                <div className="mb-4 p-3 bg-blue-50 rounded">
                  <div className="text-sm">
                    <div>Duration: <strong>{selectedPhase.workingDays} days</strong></div>
                    <div>Start: <strong>{formatDateElegant(businessDayToDate(selectedPhase.startBusinessDay))}</strong></div>
                  </div>
                </div>

                <h3 className="font-medium mb-3">Team Members</h3>
                
                <button
                  onClick={() => {
                    const roles = ['Solution Architect', 'Developer', 'Functional Consultant', 'Technical Consultant', 'Project Manager'];
                    const role = prompt(`Select role:\n${roles.join('\n')}`);
                    if (role) {
                      const resources = selectedPhase.resources || [];
                      const updated = [...resources, {
                        id: `res_${Date.now()}`,
                        role,
                        allocation: 100,
                        region: profile.region || 'MY'
                      }];
                      updatePhaseResources(selectedPhase.id, updated);
                      setSelectedPhase({ ...selectedPhase, resources: updated });
                    }
                  }}
                  className="w-full mb-4 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600"
                >
                  + Add Team Member
                </button>

                {(!selectedPhase.resources || selectedPhase.resources.length === 0) ? (
                  <p className="text-gray-500 text-center py-4">No resources assigned</p>
                ) : (
                  <div className="space-y-3">
                    {selectedPhase.resources.map((resource: any, idx: number) => (
                      <div key={resource.id} className="p-3 bg-gray-50 rounded">
                        <div className="flex justify-between items-center mb-2">
                          <span className="font-medium">{resource.role}</span>
                          <button
                            onClick={() => {
                              const updated = selectedPhase.resources.filter((r: any) => r.id !== resource.id);
                              updatePhaseResources(selectedPhase.id, updated);
                              setSelectedPhase({ ...selectedPhase, resources: updated });
                            }}
                            className="text-red-500 text-sm"
                          >
                            Remove
                          </button>
                        </div>
                        <div className="flex items-center gap-2">
                          <input
                            type="range"
                            min="0"
                            max="100"
                            value={resource.allocation}
                            onChange={(e) => {
                              const updated = selectedPhase.resources.map((r: any) =>
                                r.id === resource.id ? { ...r, allocation: parseInt(e.target.value) } : r
                              );
                              updatePhaseResources(selectedPhase.id, updated);
                              setSelectedPhase({ ...selectedPhase, resources: updated });
                            }}
                            className="flex-1"
                          />
                          <span className="text-sm w-12">{resource.allocation}%</span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
