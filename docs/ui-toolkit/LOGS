STEP 1: CREATE FOLDER STRUCTURE
Run these commands in your project root:
bash# Create main UI toolkit reference folder
mkdir -p docs/ui-toolkit
mkdir -p docs/ui-toolkit/design-system
mkdir -p docs/ui-toolkit/components
mkdir -p docs/ui-toolkit/examples

# Create component subfolders
mkdir -p src/components/ui
mkdir -p src/components/layout
mkdir -p src/components/feedback
mkdir -p src/components/data-display
mkdir -p src/components/forms
mkdir -p src/components/domain

# Create lib folder for utilities
mkdir -p src/lib

STEP 2: CREATE FILES
Here's the exact file list with copy-paste commands:
A) Design System Files
bash# Create design tokens
touch src/lib/design-tokens.ts
touch src/lib/responsive.tsx
touch src/lib/utils.ts
touch src/styles/globals.css
B) Layout Components
bashtouch src/components/layout/Container.tsx
touch src/components/layout/Section.tsx
touch src/components/layout/Header.tsx
touch src/components/layout/Footer.tsx
touch src/components/layout/index.ts
C) Feedback Components
bashtouch src/components/feedback/Modal.tsx
touch src/components/feedback/Alert.tsx
touch src/components/feedback/Loading.tsx
touch src/components/feedback/EmptyState.tsx
touch src/components/feedback/Toast.tsx
touch src/components/feedback/index.ts
D) Data Display Components
bashtouch src/components/data-display/Card.tsx
touch src/components/data-display/StatCard.tsx
touch src/components/data-display/Badge.tsx
touch src/components/data-display/Progress.tsx
touch src/components/data-display/index.ts
E) Form Components
bashtouch src/components/forms/FormField.tsx
touch src/components/forms/Select.tsx
touch src/components/forms/Checkbox.tsx
touch src/components/forms/Radio.tsx
touch src/components/forms/FileUpload.tsx
touch src/components/forms/index.ts
F) Domain Components
bashtouch src/components/domain/GanttChart.tsx
touch src/components/domain/PhaseCard.tsx
touch src/components/domain/DecisionCard.tsx
touch src/components/domain/ChatMessage.tsx
touch src/components/domain/CelebrationModal.tsx
touch src/components/domain/index.ts
G) Documentation Files
bashtouch docs/ui-toolkit/README.md
touch docs/ui-toolkit/COMPONENTS.md
touch docs/ui-toolkit/DESIGN_SYSTEM.md
touch docs/ui-toolkit/USAGE_EXAMPLES.md

STEP 3: CREATE MASTER INDEX FILES
These make imports super easy:
bashtouch src/components/index.ts
touch src/lib/index.ts

COMPLETE FILE TREE
Here's what your structure will look like:
your-project/
│
├── docs/
│   └── ui-toolkit/
│       ├── README.md                    # Overview & quick start
│       ├── COMPONENTS.md                # Component documentation
│       ├── DESIGN_SYSTEM.md             # Design tokens & principles
│       └── USAGE_EXAMPLES.md            # Code examples
│
├── src/
│   ├── lib/
│   │   ├── design-tokens.ts             # Design system constants
│   │   ├── responsive.tsx               # Responsive utilities
│   │   ├── utils.ts                     # Helper functions
│   │   └── index.ts                     # Lib barrel export
│   │
│   ├── styles/
│   │   └── globals.css                  # Global styles
│   │
│   └── components/
│       ├── index.ts                     # Master barrel export
│       │
│       ├── layout/
│       │   ├── Container.tsx
│       │   ├── Section.tsx
│       │   ├── Header.tsx
│       │   ├── Footer.tsx
│       │   └── index.ts
│       │
│       ├── feedback/
│       │   ├── Modal.tsx
│       │   ├── Alert.tsx
│       │   ├── Loading.tsx
│       │   ├── EmptyState.tsx
│       │   ├── Toast.tsx
│       │   └── index.ts
│       │
│       ├── data-display/
│       │   ├── Card.tsx
│       │   ├── StatCard.tsx
│       │   ├── Badge.tsx
│       │   ├── Progress.tsx
│       │   └── index.ts
│       │
│       ├── forms/
│       │   ├── FormField.tsx
│       │   ├── Select.tsx
│       │   ├── Checkbox.tsx
│       │   ├── Radio.tsx
│       │   ├── FileUpload.tsx
│       │   └── index.ts
│       │
│       └── domain/
│           ├── GanttChart.tsx
│           ├── PhaseCard.tsx
│           ├── DecisionCard.tsx
│           ├── ChatMessage.tsx
│           ├── CelebrationModal.tsx
│           └── index.ts

STEP 4: CREATE BARREL EXPORTS (INDEX FILES)
These files make imports clean. Create them with this content:
src/components/index.ts
typescript// src/components/index.ts
// Master barrel export for all components

// Layout
export * from './layout';

// Feedback
export * from './feedback';

// Data Display
export * from './data-display';

// Forms
export * from './forms';

// Domain
export * from './domain';

// Re-export shadcn/ui components for convenience
export * from './ui/button';
export * from './ui/input';
export * from './ui/textarea';
src/components/layout/index.ts
typescript// src/components/layout/index.ts
export { Container } from './Container';
export { Section } from './Section';
export { Header } from './Header';
export { Footer } from './Footer';
src/components/feedback/index.ts
typescript// src/components/feedback/index.ts
export { Modal } from './Modal';
export { Alert } from './Alert';
export { Loading, Skeleton } from './Loading';
export { EmptyState } from './EmptyState';
src/components/data-display/index.ts
typescript// src/components/data-display/index.ts
export { Card } from './Card';
export { StatCard } from './StatCard';
export { Badge } from './Badge';
src/components/forms/index.ts
typescript// src/components/forms/index.ts
export { FormField } from './FormField';
export { Select } from './Select';
export { Checkbox } from './Checkbox';
export { Radio } from './Radio';
export { FileUpload } from './FileUpload';
src/components/domain/index.ts
typescript// src/components/domain/index.ts
export { GanttChart } from './GanttChart';
export { PhaseCard } from './PhaseCard';
export { DecisionCard } from './DecisionCard';
export { ChatMessage } from './ChatMessage';
export { CelebrationModal } from './CelebrationModal';
src/lib/index.ts
typescript// src/lib/index.ts
export * from './design-tokens';
export * from './responsive';
export * from './utils';

STEP 5: CREATE DOCUMENTATION FILES
docs/ui-toolkit/README.md
markdown# SAP Cockpit UI Toolkit

Complete design system and component library for the SAP Implementation Cockpit.

## Quick Start
```tsx
// Import components
import { Container, Section, Header } from '@/components';
import { StatCard, Badge } from '@/components';
import { Modal, Alert } from '@/components';

// Use in your pages
<Header sticky />
<Section variant="gradient">
  <Container>
    <StatCard icon={Calendar} label="Duration" value="6 months" />
  </Container>
</Section>
File Structure

src/lib/ - Design tokens, utilities, responsive helpers
src/components/layout/ - Page layout components
src/components/feedback/ - Modals, alerts, loading states
src/components/data-display/ - Cards, badges, stats
src/components/forms/ - Form inputs and controls
src/components/domain/ - App-specific components

Installation
bash# Install dependencies
npm install framer-motion lucide-react class-variance-authority clsx tailwind-merge canvas-confetti

# Initialize shadcn/ui
npx shadcn-ui@latest init

# Add shadcn components
npx shadcn-ui@latest add button input textarea select checkbox radio-group progress label
Design Principles

Mobile-First: All components work on all screen sizes
Accessible: Built with Radix UI primitives
Type-Safe: Full TypeScript support
Consistent: Uses design tokens throughout
Performant: Optimized animations

Usage Examples
See USAGE_EXAMPLES.md for complete examples.

### **docs/ui-toolkit/COMPONENTS.md**
```markdown
# Component Reference

## Layout Components

### Container
Responsive container with max-width.
```tsx
<Container size="xl">Content</Container>
Sizes: sm | md | lg | xl | full
Section
Page section with variants.
tsx<Section variant="gray" padding="lg">Content</Section>
Variants: default | gray | gradient | dark
Header
Sticky header with navigation.
tsx<Header transparent sticky />
Feedback Components
Modal
Dialog modal with animations.
tsx<Modal isOpen={open} onClose={() => setOpen(false)} title="Title">
  Content
</Modal>
Alert
Inline alert messages.
tsx<Alert variant="success" title="Success!">
  Your changes have been saved.
</Alert>
Variants: info | success | warning | error
Loading
Loading spinners and skeletons.
tsx<Loading size="lg" text="Processing..." />
<Skeleton className="h-8 w-full" />
EmptyState
Empty state with action buttons.
tsx<EmptyState
  icon={FileText}
  title="No projects yet"
  description="Get started by creating your first project"
  action={{ label: "Create Project", onClick: handleCreate }}
/>
Data Display Components
Card
Basic card container.
tsx<Card variant="elevated" hoverable>
  Content
</Card>
Variants: default | bordered | elevated | glass
StatCard
Metric display card.
tsx<StatCard
  icon={TrendingUp}
  label="Revenue"
  value="$1.2M"
  change={{ value: "+12%", trend: "up" }}
/>
Badge
Small label badge.
tsx<Badge variant="success" size="md">
  Active
</Badge>
Domain Components
GanttChart
Project timeline visualization.
tsx<GanttChart
  phases={phases}
  totalDays={180}
  onPhaseClick={handlePhaseClick}
/>
ChatMessage
Conversational message bubble.
tsx<ChatMessage
  role="assistant"
  content="How can I help you?"
  timestamp={new Date()}
/>
CelebrationModal
Success celebration with confetti.
tsx<CelebrationModal
  isOpen={showCelebration}
  onClose={() => setShowCelebration(false)}
  title="Success!"
  message="Your timeline is ready"
  metric="⏰ You saved 4 hours!"
/>
Responsive Utilities
tsximport { useResponsive, MobileOnly, DesktopOnly } from '@/lib';

function Component() {
  const { isMobile, isTablet, isDesktop } = useResponsive();

  return (
    <>
      <MobileOnly>Mobile content</MobileOnly>
      <DesktopOnly>Desktop content</DesktopOnly>
    </>
  );
}
Design Tokens
tsximport { DESIGN_TOKENS } from '@/lib';

// Use in your components
const { colors, spacing, fontSize } = DESIGN_TOKENS;

### **docs/ui-toolkit/USAGE_EXAMPLES.md**
```markdown
# Usage Examples

## Complete Page Example
```tsx
import {
  Container,
  Section,
  Header,
  Footer,
  StatCard,
  GanttChart,
  Alert,
  Badge,
} from '@/components';
import { Calendar, Users, DollarSign } from 'lucide-react';

export default function DashboardPage() {
  return (
    <>
      <Header sticky />
      
      <Section variant="gradient" padding="xl">
        <Container>
          <Badge variant="info">Dashboard</Badge>
          <h1 className="text-4xl font-bold mt-4">Project Overview</h1>

          {/* Stats */}
          <div className="grid md:grid-cols-3 gap-6 mt-8">
            <StatCard icon={Calendar} label="Duration" value="6 months" />
            <StatCard icon={Users} label="Team" value="12" />
            <StatCard icon={DollarSign} label="Budget" value="$850K" />
          </div>

          {/* Alert */}
          <Alert variant="success" className="mt-6">
            Your project is on track!
          </Alert>

          {/* Timeline */}
          <div className="mt-12 bg-white rounded-2xl p-8 shadow-lg">
            <h2 className="text-2xl font-bold mb-6">Timeline</h2>
            <GanttChart phases={phases} totalDays={180} />
          </div>
        </Container>
      </Section>

      <Footer />
    </>
  );
}
Form Example
tsximport { FormField, Select, Checkbox, Button } from '@/components';

export default function FormExample() {
  return (
    <form className="space-y-6">
      <FormField
        label="Project Name"
        name="name"
        placeholder="Enter project name"
        required
      />

      <Select
        label="Module"
        options={[
          { value: 'fi', label: 'Finance' },
          { value: 'hr', label: 'HR' },
        ]}
      />

      <Checkbox label="Include procurement" />

      <Button type="submit" size="lg" className="w-full">
        Create Project
      </Button>
    </form>
  );
}
Modal Example
tsximport { Modal, Button } from '@/components';
import { useState } from 'react';

export default function ModalExample() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <>
      <Button onClick={() => setIsOpen(true)}>Open Modal</Button>

      <Modal
        isOpen={isOpen}
        onClose={() => setIsOpen(false)}
        title="Confirmation"
        size="md"
      >
        <p className="mb-6">Are you sure you want to proceed?</p>
        <div className="flex gap-3 justify-end">
          <Button variant="outline" onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>
            Confirm
          </Button>
        </div>
      </Modal>
    </>
  );
}
Responsive Example
tsximport { useResponsive, MobileOnly, DesktopOnly } from '@/lib';

export default function ResponsiveExample() {
  const { isMobile } = useResponsive();

  return (
    <div>
      <MobileOnly>
        <MobileMenu />
      </MobileOnly>

      <DesktopOnly>
        <DesktopNav />
      </DesktopOnly>

      {isMobile ? (
        <MobileLayout />
      ) : (
        <DesktopLayout />
      )}
    </div>
  );
}
Loading States
tsximport { Loading, Skeleton } from '@/components';

export default function LoadingExample() {
  const [isLoading, setIsLoading] = useState(true);

  if (isLoading) {
    return (
      <div className="space-y-4">
        <Skeleton className="h-12 w-full" />
        <Skeleton className="h-64 w-full" />
        <Loading text="Loading project..." />
      </div>
    );
  }

  return <Content />;
}
Empty State
tsximport { EmptyState } from '@/components';
import { FileText } from 'lucide-react';

export default function EmptyStateExample() {
  return (
    <EmptyState
      icon={FileText}
      title="No projects found"
      description="Get started by creating your first SAP project"
      action={{
        label: "Create Project",
        onClick: () => router.push('/projects/new')
      }}
      secondaryAction={{
        label: "Learn More",
        onClick: () => router.push('/docs')
      }}
    />
  );
}

---

## **STEP 6: HOW TO USE WITH CLAUDE CODE**

Create a reference file for Claude Code:
```bash
touch docs/ui-toolkit/CLAUDE_CODE_REFERENCE.md
docs/ui-toolkit/CLAUDE_CODE_REFERENCE.md
markdown# Claude Code Reference Guide

## For Claude Code: Use This Toolkit

When building pages for SAP Cockpit, ALWAYS reference this UI toolkit.

## Import Pattern
```tsx
// Standard imports
import { Container, Section, Header, Footer } from '@/components';
import { StatCard, Card, Badge } from '@/components';
import { Modal, Alert, Loading } from '@/components';
import { GanttChart, ChatMessage } from '@/components';
import { DESIGN_TOKENS, useResponsive } from '@/lib';
Component Locations

Layout: /src/components/layout/
Feedback: /src/components/feedback/
Data Display: /src/components/data-display/
Forms: /src/components/forms/
Domain: /src/components/domain/
Utils: /src/lib/

Design Tokens Location
/src/lib/design-tokens.ts - Use these constants for:

Colors
Spacing
Typography
Shadows
Border radius
Transitions

Standards

Always use design tokens - Don't hardcode values
Mobile-first - Build for mobile, scale up
Consistent spacing - Use multiples of 4px
Accessible - Include proper ARIA labels
Type-safe - Use TypeScript interfaces

Example Page Structure
tsx<Header sticky />
<Section variant="gradient" padding="xl">
  <Container size="xl">
    {/* Content */}
  </Container>
</Section>
<Footer />
Quick Commands
View components: ls src/components/*/
Check design tokens: cat src/lib/design-tokens.ts
See examples: cat docs/ui-toolkit/USAGE_EXAMPLES.md

---

## **STEP 7: INSTALL DEPENDENCIES**
```bash
# Install all required packages
npm install framer-motion lucide-react class-variance-authority clsx tailwind-merge canvas-confetti

# Install dev dependencies
npm install -D @types/canvas-confetti

# Initialize shadcn/ui (if not done)
npx shadcn-ui@latest init

# Add shadcn components
npx shadcn-ui@latest add button
npx shadcn-ui@latest add input
npx shadcn-ui@latest add textarea
npx shadcn-ui@latest add select
npx shadcn-ui@latest add checkbox
npx shadcn-ui@latest add radio-group
npx shadcn-ui@latest add progress
npx shadcn-ui@latest add label

STEP 8: VERIFICATION CHECKLIST
After creating all files, verify:
bash# Check folder structure
tree src/components -L 2
tree src/lib
tree docs/ui-toolkit

# Verify files exist
ls src/components/layout/
ls src/components/feedback/
ls src/components/data-display/
ls src/lib/

# Check documentation
cat docs/ui-toolkit/README.md

QUICK REFERENCE FOR YOU
When asking Claude Code to build something:

"Build a dashboard page using the UI toolkit in /docs/ui-toolkit/. Use components from /src/components/ and follow patterns in USAGE_EXAMPLES.md"

Or:

"Create a modal using the Modal component from /src/components/feedback/Modal.tsx. Follow the design tokens in /src/lib/design-tokens.ts"


ONE-COMMAND SETUP (OPTIONAL)
Create a setup script:
bashtouch setup-ui-toolkit.sh
chmod +x setup-ui-toolkit.sh
setup-ui-toolkit.sh
bash#!/bin/bash

echo "🚀 Setting up UI Toolkit..."

# Create directories
mkdir -p docs/ui-toolkit
mkdir -p src/components/{layout,feedback,data-display,forms,domain}
mkdir -p src/lib

# Create all component files
touch src/components/layout/{Container,Section,Header,Footer,index}.tsx
touch src/components/feedback/{Modal,Alert,Loading,EmptyState,Toast,index}.tsx
touch src/components/data-display/{Card,StatCard,Badge,Progress,index}.tsx
touch src/components/forms/{FormField,Select,Checkbox,Radio,FileUpload,index}.tsx
touch src/components/domain/{GanttChart,PhaseCard,DecisionCard,ChatMessage,CelebrationModal,index}.tsx

# Create lib files
touch src/lib/{design-tokens,responsive,utils,index}.ts

# Create documentation
touch docs/ui-toolkit/{README,COMPONENTS,DESIGN_SYSTEM,USAGE_EXAMPLES,CLAUDE_CODE_REFERENCE}.md

# Create master index
touch src/components/index.ts

echo "✅ UI Toolkit structure created!"
echo "📝 Next steps:"
echo "   1. Copy component code into files"
echo "   2. Run: npm install framer-motion lucide-react canvas-confetti"
echo "   3. Run: npx shadcn-ui@latest init"
echo "   4. Check docs/ui-toolkit/README.md"
Then run:
bash./setup-ui-toolkit.sh

Now you have everything organized! Claude Code can easily reference:

Components: /src/components/
Design System: /src/lib/design-tokens.ts
Examples: /docs/ui-toolkit/USAGE_EXAMPLES.md
Quick Ref: /docs/ui-toolkit/CLAUDE_CODE_REFERENCE.md