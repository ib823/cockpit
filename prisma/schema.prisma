generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model AuditEvent {
  id        String   @id
  userId    String
  type      String
  createdAt DateTime @default(now())
  meta      Json?
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, createdAt])
}

model Authenticator {
  id         String   @id
  userId     String
  publicKey  Bytes
  counter    Int
  transports String[]
  deviceType String
  backedUp   Boolean
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailApproval {
  email            String    @id
  tokenHash        String
  tokenExpiresAt   DateTime
  approvedByUserId String
  usedAt           DateTime?
  createdAt        DateTime  @default(now())
  codeSent         Boolean   @default(false)
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model audit_logs {
  id        String      @id
  userId    String
  action    AuditAction
  entity    String
  entityId  String
  changes   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime    @default(now())
  users     users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([entity, entityId])
  @@index([userId])
}

model chips {
  id         String   @id
  projectId  String
  createdAt  DateTime @default(now())
  confidence Decimal  @db.Decimal(3, 2)
  evidence   String?
  type       ChipType
  value      String
  projects   projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([type])
}

model comments {
  id        String   @id
  projectId String
  userId    String
  content   String
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  projects  projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
}

model form_items {
  id         String   @id
  projectId  String
  name       String
  type       String
  languages  String[]
  complexity String
  effort     Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  projects   projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model holidays {
  id     String   @id
  name   String
  date   DateTime @db.Date
  region String

  @@unique([date, region])
  @@index([date])
  @@index([region])
}

model integration_items {
  id         String   @id
  projectId  String
  name       String
  type       String
  source     String
  target     String
  complexity String
  volume     String
  effort     Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  projects   projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model magic_tokens {
  id         String    @id
  email      String
  token      String    @unique
  expiresAt  DateTime
  usedAt     DateTime?
  deviceInfo String?
  ipAddress  String?
  createdAt  DateTime  @default(now())

  @@index([email])
  @@index([token])
}

model phases {
  id               String      @id
  projectId        String
  name             String
  workingDays      Int
  color            String      @default("blue")
  order            Int
  createdAt        DateTime    @default(now())
  updatedAt        DateTime
  category         String
  dependencies     String?
  effort           Decimal     @db.Decimal(10, 2)
  startBusinessDay Int
  projects         projects    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  resources        resources[]

  @@index([order])
  @@index([projectId])
}

model projects {
  id                 String              @id
  name               String
  description        String?
  status             ProjectStatus       @default(DRAFT)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  clientName         String?
  complexity         String?
  duration           Int?
  employees          Int?
  endDate            DateTime?
  industry           String?
  integrationPosture String?
  legalEntities      Int?
  moduleCombo        String?
  ownerId            String
  rateRegion         String?
  region             String?
  revenue            Decimal?            @db.Decimal(15, 2)
  ssoMode            String?
  startDate          DateTime?
  totalCost          Decimal?            @db.Decimal(15, 2)
  totalEffort        Decimal?            @db.Decimal(10, 2)
  chips              chips[]
  comments           comments[]
  form_items         form_items[]
  integration_items  integration_items[]
  phases             phases[]
  users              users               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  resources          resources[]
  ricefw_items       ricefw_items[]
  shares             shares[]
  snapshots          snapshots[]

  @@index([createdAt])
  @@index([ownerId])
  @@index([status])
}

model push_subscriptions {
  id           String   @id
  email        String   @unique
  subscription Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([email])
}

model resources {
  id         String   @id
  projectId  String
  phaseId    String?
  name       String
  role       String
  allocation Int
  createdAt  DateTime @default(now())
  hourlyRate Decimal  @db.Decimal(10, 2)
  region     String
  phases     phases?  @relation(fields: [phaseId], references: [id])
  projects   projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([phaseId])
  @@index([projectId])
}

model ricefw_items {
  id            String   @id
  projectId     String
  type          String
  name          String
  description   String?
  complexity    String
  count         Int
  effortPerItem Decimal  @db.Decimal(10, 2)
  totalEffort   Decimal  @db.Decimal(10, 2)
  phase         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  projects      projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, type])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model shares {
  id           String    @id
  projectId    String
  token        String    @unique
  expiresAt    DateTime?
  viewCount    Int       @default(0)
  lastViewedAt DateTime?
  createdAt    DateTime  @default(now())
  projects     projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([token])
}

model snapshots {
  id        String   @id
  projectId String
  data      Json
  createdAt DateTime @default(now())
  createdBy String
  label     String?
  version   Int
  projects  projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, version])
  @@index([projectId])
}

model users {
  id                 String          @id
  email              String          @unique
  name               String?
  createdAt          DateTime        @default(now())
  emailVerified      DateTime?
  image              String?
  role               Role            @default(USER)
  updatedAt          DateTime
  accessExpiresAt    DateTime        @default(now())
  exception          Boolean         @default(false)
  firstLoginAt       DateTime?
  lastLoginAt        DateTime?
  lastTimelineAt     DateTime?
  timelinesGenerated Int             @default(0)
  AuditEvent         AuditEvent[]
  Authenticator      Authenticator[]
  accounts           accounts[]
  audit_logs         audit_logs[]
  comments           comments[]
  projects           projects[]
  sessions           sessions[]

  @@index([email])
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  SHARE
  EXPORT
  APPROVE
  ARCHIVE
}

enum ChipType {
  COUNTRY
  EMPLOYEES
  REVENUE
  INDUSTRY
  MODULES
  TIMELINE
  INTEGRATION
  COMPLIANCE
  LEGAL_ENTITIES
  SSO
  BANKING
  EXISTING_SYSTEM
  LOCATIONS
  USERS
  DATA_VOLUME
  CURRENCIES
  LANGUAGES
}

enum ProjectStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  ARCHIVED
}

enum Role {
  USER
  MANAGER
  ADMIN
}
