// Prisma Schema for SAP Implementation Cockpit
// Using Prisma Accelerate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// ==================== AUTHENTICATION ====================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          Role      @default(USER)
  
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  comments      Comment[]
  auditLogs     AuditLog[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([email])
  @@map("users")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ==================== CORE DOMAIN ====================

model Project {
  id              String        @id @default(cuid())
  name            String
  description     String?       @db.Text
  status          ProjectStatus @default(DRAFT)
  
  clientName      String?
  industry        String?
  region          String?
  employees       Int?
  revenue         Decimal?      @db.Decimal(15, 2)
  legalEntities   Int?
  
  moduleCombo     String?
  complexity      String?
  ssoMode         String?
  integrationPosture String?
  rateRegion      String?
  
  totalEffort     Decimal?      @db.Decimal(10, 2)
  totalCost       Decimal?      @db.Decimal(15, 2)
  duration        Int?
  startDate       DateTime?
  endDate         DateTime?
  
  owner           User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  
  chips           Chip[]
  phases          Phase[]
  snapshots       Snapshot[]
  shares          Share[]
  comments        Comment[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([ownerId])
  @@index([status])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("projects")
}

enum ProjectStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  ARCHIVED
}

model Chip {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  type        ChipType
  value       String   @db.Text
  confidence  Decimal  @db.Decimal(3, 2)
  evidence    String?  @db.Text
  
  createdAt   DateTime @default(now())
  
  @@index([projectId])
  @@index([type])
  @@map("chips")
}

enum ChipType {
  COUNTRY
  EMPLOYEES
  REVENUE
  INDUSTRY
  MODULES
  TIMELINE
  INTEGRATION
  COMPLIANCE
  LEGAL_ENTITIES
  SSO
}

model Phase {
  id               String     @id @default(cuid())
  projectId        String
  project          Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  name             String
  category         String
  workingDays      Int
  effort           Decimal    @db.Decimal(10, 2)
  startBusinessDay Int
  color            String     @default("blue")
  
  dependencies     String?    @db.Text
  
  resources        Resource[]
  
  order            Int
  
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  @@index([projectId])
  @@index([order])
  @@map("phases")
}

model Resource {
  id          String   @id @default(cuid())
  phaseId     String
  phase       Phase    @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  
  name        String
  role        String
  region      String
  allocation  Int
  hourlyRate  Decimal  @db.Decimal(10, 2)
  
  createdAt   DateTime @default(now())
  
  @@index([phaseId])
  @@map("resources")
}

model Holiday {
  id          String   @id @default(cuid())
  name        String
  date        DateTime @db.Date
  region      String
  
  @@unique([date, region])
  @@index([region])
  @@index([date])
  @@map("holidays")
}

// ==================== COLLABORATION ====================

model Share {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  token       String   @unique @default(cuid())
  expiresAt   DateTime?
  viewCount   Int      @default(0)
  lastViewedAt DateTime?
  
  createdAt   DateTime @default(now())
  
  @@index([token])
  @@index([projectId])
  @@map("shares")
}

model Comment {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  content     String   @db.Text
  resolved    Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([projectId])
  @@index([userId])
  @@map("comments")
}

// ==================== VERSIONING ====================

model Snapshot {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  version     Int
  data        Json
  createdBy   String
  label       String?
  
  createdAt   DateTime @default(now())
  
  @@unique([projectId, version])
  @@index([projectId])
  @@map("snapshots")
}

// ==================== AUDIT ====================

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  action      AuditAction
  entity      String
  entityId    String
  changes     Json?
  
  ipAddress   String?
  userAgent   String?  @db.Text
  
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  SHARE
  EXPORT
  APPROVE
  ARCHIVE
}