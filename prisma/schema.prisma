generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model AuditEvent {
  id        String   @id
  userId    String
  type      String
  createdAt DateTime @default(now())
  meta      Json?
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, createdAt])
}

model Authenticator {
  id         String   @id
  userId     String
  publicKey  Bytes
  counter    Int
  transports String[]
  deviceType String
  backedUp   Boolean
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailApproval {
  email            String    @id
  tokenHash        String
  tokenExpiresAt   DateTime
  approvedByUserId String
  usedAt           DateTime?
  createdAt        DateTime  @default(now())
  codeSent         Boolean   @default(false)
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model audit_logs {
  id        String      @id
  userId    String
  action    AuditAction
  entity    String
  entityId  String
  changes   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime    @default(now())
  users     users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([entity, entityId])
  @@index([userId])
}

model chips {
  id         String   @id
  projectId  String
  createdAt  DateTime @default(now())
  confidence Decimal  @db.Decimal(3, 2)
  evidence   String?
  type       ChipType
  value      String
  projects   projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([type])
}

model comments {
  id        String   @id
  projectId String
  userId    String
  content   String
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  projects  projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
}

model form_items {
  id         String   @id
  projectId  String
  name       String
  type       String
  languages  String[]
  complexity String
  effort     Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  projects   projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model holidays {
  id     String   @id
  name   String
  date   DateTime @db.Date
  region String

  @@unique([date, region])
  @@index([date])
  @@index([region])
}

model integration_items {
  id         String   @id
  projectId  String
  name       String
  type       String
  source     String
  target     String
  complexity String
  volume     String
  effort     Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  projects   projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model magic_tokens {
  id         String    @id
  email      String
  token      String    @unique
  expiresAt  DateTime
  usedAt     DateTime?
  deviceInfo String?
  ipAddress  String?
  createdAt  DateTime  @default(now())

  @@index([email])
  @@index([token])
}

model phases {
  id               String      @id
  projectId        String
  name             String
  workingDays      Int
  color            String      @default("blue")
  order            Int
  createdAt        DateTime    @default(now())
  updatedAt        DateTime
  category         String
  dependencies     String?
  effort           Decimal     @db.Decimal(10, 2)
  startBusinessDay Int
  projects         projects    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  resources        resources[]

  @@index([order])
  @@index([projectId])
}

model projects {
  id                 String              @id
  name               String
  description        String?
  status             ProjectStatus       @default(DRAFT)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  clientName         String?
  complexity         String?
  duration           Int?
  employees          Int?
  endDate            DateTime?
  industry           String?
  integrationPosture String?
  legalEntities      Int?
  moduleCombo        String?
  ownerId            String
  rateRegion         String?
  region             String?
  revenue            Decimal?            @db.Decimal(15, 2)
  ssoMode            String?
  startDate          DateTime?
  totalCost          Decimal?            @db.Decimal(15, 2)
  totalEffort        Decimal?            @db.Decimal(10, 2)
  chips              chips[]
  comments           comments[]
  form_items         form_items[]
  integration_items  integration_items[]
  phases             phases[]
  users              users               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  resources          resources[]
  ricefw_items       ricefw_items[]
  shares             shares[]
  snapshots          snapshots[]

  @@index([createdAt])
  @@index([ownerId])
  @@index([status])
}

model push_subscriptions {
  id           String   @id
  email        String   @unique
  subscription Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([email])
}

model resources {
  id         String   @id
  projectId  String
  phaseId    String?
  name       String
  role       String
  allocation Int
  createdAt  DateTime @default(now())
  hourlyRate Decimal  @db.Decimal(10, 2)
  region     String
  phases     phases?  @relation(fields: [phaseId], references: [id])
  projects   projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([phaseId])
  @@index([projectId])
}

model ricefw_items {
  id            String   @id
  projectId     String
  type          String
  name          String
  description   String?
  complexity    String
  count         Int
  effortPerItem Decimal  @db.Decimal(10, 2)
  totalEffort   Decimal  @db.Decimal(10, 2)
  phase         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  projects      projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, type])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model shares {
  id           String    @id
  projectId    String
  token        String    @unique
  expiresAt    DateTime?
  viewCount    Int       @default(0)
  lastViewedAt DateTime?
  createdAt    DateTime  @default(now())
  projects     projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([token])
}

model snapshots {
  id        String   @id
  projectId String
  data      Json
  createdAt DateTime @default(now())
  createdBy String
  label     String?
  version   Int
  projects  projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, version])
  @@index([projectId])
}

model users {
  id                 String          @id
  email              String          @unique
  name               String?
  createdAt          DateTime        @default(now())
  emailVerified      DateTime?
  image              String?
  role               Role            @default(USER)
  updatedAt          DateTime
  accessExpiresAt    DateTime        @default(now())
  exception          Boolean         @default(false)
  firstLoginAt       DateTime?
  lastLoginAt        DateTime?
  lastTimelineAt     DateTime?
  timelinesGenerated Int             @default(0)
  AuditEvent         AuditEvent[]
  Authenticator      Authenticator[]
  accounts           accounts[]
  audit_logs         audit_logs[]
  comments           comments[]
  projects           projects[]
  sessions           sessions[]
  ganttProjects      GanttProject[]

  @@index([email])
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  SHARE
  EXPORT
  APPROVE
  ARCHIVE
}

enum ChipType {
  COUNTRY
  EMPLOYEES
  REVENUE
  INDUSTRY
  MODULES
  TIMELINE
  INTEGRATION
  COMPLIANCE
  LEGAL_ENTITIES
  SSO
  BANKING
  EXISTING_SYSTEM
  LOCATIONS
  USERS
  DATA_VOLUME
  CURRENCIES
  LANGUAGES
}

enum ProjectStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  ARCHIVED
}

enum Role {
  USER
  MANAGER
  ADMIN
}

// ============================================
// SAP Cockpit - Phase 1: L3-Based Estimator Models
// ============================================

/// Organization for multi-tenancy support
model Organization {
  id              String            @id @default(cuid())
  name            String
  settings        Json              // { defaultRateCard, holidayCalendars, allowTierD }
  members         TeamMember[]
  scenarios       Scenario[]
  savedSelections SavedSelection[]
  rateCards       RateCard[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([name])
}

/// Team member with role-based access control
model TeamMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole     @default(VIEWER)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

enum UserRole {
  ADMIN
  OWNER
  EDITOR
  VIEWER
}

/// Line of Business (12 LOBs)
model Lob {
  id                  String        @id @default(cuid())
  lobName             String        @unique
  l3Count             Int
  releaseTag          String
  navigatorSectionUrl String
  l3ScopeItems        L3ScopeItem[]
  createdAt           DateTime      @default(now())

  @@index([lobName])
}

/// L3 Scope Item (293 items from SAP Process Navigator)
model L3ScopeItem {
  id                  String              @id @default(cuid())
  lobId               String
  lob                 Lob                 @relation(fields: [lobId], references: [id], onDelete: Cascade)
  module              String?
  l3Code              String              @unique
  l3Name              String
  processNavigatorUrl String
  formerCode          String?
  releaseTag          String
  complexityMetrics   ComplexityMetrics?
  integrationDetails  IntegrationDetails?
  createdAt           DateTime            @default(now())

  @@index([lobId])
  @@index([l3Code])
  @@index([module])
}

/// Complexity metrics for each L3 item
model ComplexityMetrics {
  id                 String      @id @default(cuid())
  l3Id               String      @unique
  l3ScopeItem        L3ScopeItem @relation(fields: [l3Id], references: [id], onDelete: Cascade)
  defaultTier        String      // A, B, C, D
  coefficient        Float?      // NULL for Tier D
  tierRationale      String
  crossModuleTouches String?     // e.g., "FI↔CO"
  localizationFlag   Boolean     @default(false)
  extensionRisk      String      // Low, Med, High
  createdAt          DateTime    @default(now())

  @@index([defaultTier])
  @@index([extensionRisk])
}

/// Integration details for each L3 item
model IntegrationDetails {
  id                          String      @id @default(cuid())
  l3Id                        String      @unique
  l3ScopeItem                 L3ScopeItem @relation(fields: [l3Id], references: [id], onDelete: Cascade)
  integrationPackageAvailable String      // Yes, No, NA
  testScriptExists            Boolean     @default(true)
  createdAt                   DateTime    @default(now())
}

/// Saved L3 selection bundles for reuse
model SavedSelection {
  id             String       @id @default(cuid())
  name           String
  description    String?
  l3ItemIds      String[]     // Array of L3 codes
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      String
  isPublic       Boolean      @default(false)
  usageCount     Int          @default(0)
  tags           String[]
  createdAt      DateTime     @default(now())

  @@index([organizationId])
  @@index([createdBy])
  @@index([isPublic])
}

/// Rate card for resource costing
model RateCard {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  name           String
  country        String
  currency       String
  rates          Json         // { role: dailyRate }
  effectiveFrom  DateTime
  effectiveTo    DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())

  @@index([organizationId, isActive])
  @@index([country])
}

/// Scenario (saved estimate with results)
model Scenario {
  id              String            @id @default(cuid())
  userId          String
  organizationId  String?
  organization    Organization?     @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  name            String
  inputs          Json              // EstimatorInputs
  totalMD         Float
  durationMonths  Float
  pmoMD           Float
  phases          Json              // PhaseBreakdown[]
  startDate       DateTime?
  resources       Json?             // ResourceAllocation[]
  versions        ScenarioVersion[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([userId])
  @@index([organizationId])
  @@index([createdAt])
}

/// Scenario version history for audit trail
model ScenarioVersion {
  id            String   @id @default(cuid())
  scenarioId    String
  scenario      Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  versionNumber Int
  label         String?
  snapshot      Json     // Complete scenario state
  changes       Json?    // Diff from previous version
  changeReason  String?
  createdBy     String
  createdAt     DateTime @default(now())

  @@unique([scenarioId, versionNumber])
  @@index([scenarioId])
  @@index([createdAt])
}

// ============================================
// Gantt Tool - Database Models
// ============================================

/// Gantt Project - Main project container
model GanttProject {
  id          String   @id @default(cuid())
  userId      String   // Owner of the project
  name        String
  description String?  @db.Text
  startDate   DateTime @db.Date

  // View settings stored as JSON for flexibility
  viewSettings Json    // GanttViewSettings type

  // Relationships
  phases      GanttPhase[]
  milestones  GanttMilestone[]
  holidays    GanttHoliday[]
  resources   GanttResource[]

  // Sharing and collaboration
  shares      GanttProjectShare[]

  // Budget (stored as JSON for flexibility)
  budget      Json?   // ProjectBudget type

  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Soft delete support
  deletedAt   DateTime?

  // User relationship
  user        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([deletedAt])
}

/// Gantt Phase - Major project phases
model GanttPhase {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?  @db.Text
  color       String   // Hex color code
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  collapsed   Boolean  @default(false)
  order       Int      @default(0) // Display order

  // Dependencies stored as array of phase IDs
  dependencies String[] // Array of GanttPhase IDs

  // Relationships
  project     GanttProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       GanttTask[]
  phaseResourceAssignments GanttPhaseResourceAssignment[]

  @@index([projectId])
  @@index([order])
}

/// Gantt Task - Individual tasks within phases
model GanttTask {
  id          String   @id @default(cuid())
  phaseId     String
  name        String
  description String?  @db.Text
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  progress    Int      @default(0) // 0-100
  assignee    String?  // Legacy field, use resourceAssignments instead
  order       Int      @default(0) // Display order within phase

  // Dependencies stored as array of task IDs
  dependencies String[] // Array of GanttTask IDs

  // Relationships
  phase       GanttPhase @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  resourceAssignments GanttTaskResourceAssignment[]

  @@index([phaseId])
  @@index([order])
}

/// Gantt Milestone - Key project milestones
model GanttMilestone {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?  @db.Text
  date        DateTime @db.Date
  icon        String   // Lucide icon name
  color       String   // Hex color code

  // Relationships
  project     GanttProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([date])
}

/// Gantt Holiday - Project holidays/non-working days
model GanttHoliday {
  id        String   @id @default(cuid())
  projectId String
  name      String
  date      DateTime @db.Date
  region    String   // e.g., "US", "MY", "Global"
  type      String   // "public" | "company" | "custom"

  // Relationships
  project   GanttProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([date])
}

/// Gantt Resource - Team members and their roles
model GanttResource {
  id            String   @id @default(cuid())
  projectId     String
  name          String   // Role name (not person name)
  category      String   // ResourceCategory enum value
  description   String   @db.Text
  designation   String   // ResourceDesignation enum value

  // Organization hierarchy
  managerResourceId String? // ID of manager resource
  email         String?
  department    String?
  location      String?
  projectRole   String?

  // Cost tracking
  rateType          String? // "hourly" | "daily" | "fixed"
  hourlyRate        Decimal? @db.Decimal(10, 2)
  dailyRate         Decimal? @db.Decimal(10, 2)
  currency          String?  // e.g., "USD", "MYR"
  utilizationTarget Int?     // 0-100

  // Metadata
  createdAt     DateTime @default(now())

  // Relationships
  project       GanttProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskAssignments GanttTaskResourceAssignment[]
  phaseAssignments GanttPhaseResourceAssignment[]

  @@index([projectId])
  @@index([category])
}

/// Task Resource Assignment - Links resources to tasks
model GanttTaskResourceAssignment {
  id                  String   @id @default(cuid())
  taskId              String
  resourceId          String
  assignmentNotes     String   @db.Text // What they do on this task
  allocationPercentage Int     // 0-100
  assignedAt          DateTime @default(now())

  // Relationships
  task      GanttTask     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  resource  GanttResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([taskId, resourceId]) // Prevent duplicate assignments
  @@index([taskId])
  @@index([resourceId])
}

/// Phase Resource Assignment - Links PM resources to phases
model GanttPhaseResourceAssignment {
  id                  String   @id @default(cuid())
  phaseId             String
  resourceId          String
  assignmentNotes     String   @db.Text
  allocationPercentage Int     // 0-100
  assignedAt          DateTime @default(now())

  // Relationships
  phase     GanttPhase    @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  resource  GanttResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([phaseId, resourceId]) // Prevent duplicate assignments
  @@index([phaseId])
  @@index([resourceId])
}

/// Gantt Project Share - Share projects with view-only access
model GanttProjectShare {
  id           String    @id @default(cuid())
  projectId    String
  token        String    @unique // Public share token
  expiresAt    DateTime?
  viewCount    Int       @default(0)
  lastViewedAt DateTime?
  createdAt    DateTime  @default(now())
  createdBy    String    // User ID who created the share

  // Relationships
  project      GanttProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([token])
}
